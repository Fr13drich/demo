# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/orb-intro/
orbs:
  # The python orb contains a set of prepackaged CircleCI configuration you can use repeatedly in your configuration files
  # Orb commands and jobs help you with common scripting around a language/tool
  # so you dont have to copy and paste it everywhere.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/python
  python: circleci/python@1.5.0

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/configuration-reference/#jobs
jobs:
  lint:
    docker:
      - image: cimg/python:3.10.2
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: pip
          # app-dir: ~/project/package-directory/  # If your requirements.txt isn't in the root directory.
          # pip-dependency-file: test-requirements.txt  # if you have a different name for your requirements file, maybe one that combines your runtime and test requirements.
      - run:
          name: Run pylint
          # This assumes pytest is installed via the install-package step above
          command: pylint app.py
  dockerize:
    docker:
      - image: cimg/python:3.10.2 
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: createVenv
          command: |
            make setup
            #python3 -m venv ~/demo &&
            #source ~/demo/bin/activate
      - run:
          name: installSoftware
          command: |
            make install
            #pip3 install --upgrade pip &&
            #pip3 install -r requirements.txt
#        - run:
#           name: startDocker
#           command: |
              # systemctl stop docker
              # cd /var/lib/docker
#               sudo rm -rf /var/lib/docker/*
#               sudo mkdir -p /var/lib/docker/devicemapper/devicemapper
#               sudo dd if=/dev/zero of=/var/lib/docker/devicemapper/devicemapper/data bs=1G count=0 seek=250
              # systemctl start docker
#               sudo dockerd
      - run:
          name: buildImage
          command: |
              docker build --tag=demo . 
      - run:
          name: CreateDockerpath
          command: |
            dockerpath=fr13drich/demo
      - run:
          name: Authenticate&tag
          command: |
            echo "Docker ID and Image: $dockerpath"
            docker login -u ${dockerhubusername} -p ${dockerhubpassword}
            docker tag demo ${dockerhubusername}/demo:v1.0.0
      - run:
          name: push
          command: docker push ${dockerhubusername}/demo:v1.0.0
  createInfra:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["a0:48:fc:b7:54:f4:60:86:37:de:46:40:91:d7:ff:21"]
      - run:
          name: "aws stack"
          command:  |
            aws cloudformation create-stack \
            --template-body file://eks.yml \
            --parameters file://eks.json \
            --capabilities "CAPABILITY_IAM" "CAPABILITY_NAMED_IAM" \
            --stack-name demo \
            --region us-east-1  
  
# Invoke jobs via workflows
# See: https://circleci.com/docs/configuration-reference/#workflows
workflows:
  demo:
    jobs:
      - lint
      - dockerize:
          requires:
            - lint
      - createInfra:
          requires:
            - dockerize
            