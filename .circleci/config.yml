# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/orb-intro/
orbs:
  # The python orb contains a set of prepackaged CircleCI configuration you can use repeatedly in your configuration files
  # Orb commands and jobs help you with common scripting around a language/tool
  # so you dont have to copy and paste it everywhere.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/python
  python: circleci/python@1.5.0

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/configuration-reference/#jobs
jobs:
  lint:
    docker:
      - image: cimg/python:3.10.2
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: pip
          # app-dir: ~/project/package-directory/  # If your requirements.txt isn't in the root directory.
          # pip-dependency-file: test-requirements.txt  # if you have a different name for your requirements file, maybe one that combines your runtime and test requirements.
      - run:
          name: Run pylint
          # This assumes pytest is installed via the install-package step above
          command: pylint app.py
  buildandpush:
    docker:
      - image: cimg/python:3.10.2 
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: createVenv
          command: |
            make setup
            #python3 -m venv ~/demo &&
            #source ~/demo/bin/activate
      - run:
          name: installSoftware
          command: |
            make install
            #pip3 install --upgrade pip &&
            #pip3 install -r requirements.txt
      - run:
          name: buildImage
          command: |
              docker build --tag=demo . 
      - run:
          name: Install awscli
          command: |
            pip3 install --upgrade pip 
            pip3 install --no-cache-dir awscli 
      - run:
          name: CreateDockerpath
          command: |
            dockerpath=fr13drich/demo
      - run:
          name: Authenticate&tag
          command: |
            # for dockerhub:
            # docker login -u ${dockerhubusername} -p ${dockerhubpassword}
            # docker tag demo ${dockerhubusername}/demo:v1.0.0
            # for ECR:
            # aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 928015429973.dkr.ecr.us-east-1.amazonaws.com
            aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/z4a6j9j4
            docker images
            #docker tag demo 928015429973.dkr.ecr.us-east-1.amazonaws.com/demo:latest
            docker tag demo:latest public.ecr.aws/z4a6j9j4/demo:latest
      - run:
          name: push
          command: docker push public.ecr.aws/z4a6j9j4/demo:latest
                   #docker push 928015429973.dkr.ecr.us-east-1/demo # ${dockerhubusername}/demo:v1.0.0
  createInfra:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: "aws stack"
          command:  |
            aws cloudformation create-stack \
            --template-body file://eks.yml \
            --parameters file://eks.json \
            --capabilities "CAPABILITY_IAM" "CAPABILITY_NAMED_IAM" \
            --stack-name demo \
            --region us-east-1
      - run:
          name: "sleep"
          command: sleep 840 # wait 8' for the cluster to be created
          no_output_timeout: 15m
          
  deploy:
    docker:
      - image: cimg/python:3.10.2 # d3fk/kubectl # amazon/aws-cli
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: 'install kubectl'
          command: |
            # curl --silent --location "https://github.com/weaveworks/eksctl/releases/download/latest_release/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            # sudo mv /tmp/eksctl /usr/local/bin
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
            kubectl version --client
      - run:
          name: "deploy"
          command: |
            # kubectl get nodes
            # kubectl create deploy demo --image=fr13drich/demo:v1.0.0
            # mypod=`kubectl get pods --no-headers=true | cut -f 1 -d " "`
            # kubectl port-forward pod/$mypod --address 0.0.0.0 80:80
            ls -laR /home
            ls -la /etc/kubernetes/admin.conf
            export KUBECONFIG=$HOME/.kube/config
            kubectl apply -f deploymentManifest.yml
            # kubectl get deploy,rs,svc,pods
# Invoke jobs via workflows
# See: https://circleci.com/docs/configuration-reference/#workflows
workflows:
  demo:
    jobs:
      - lint
      - buildandpush:
          requires:
            - lint
      - createInfra:
          requires:
            - buildandpush
      - deploy:
          requires:
            - createInfra
            